{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/GameCards/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","GameCard","alt","name","src","image","onClick","click","isClicked","App","state","cards","score","topScore","hit","title","shuffle","array","i","length","j","Math","floor","random","id","filter","card","setState","console","log","this","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ylCAMeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,WCO1BC,MARf,SAAeH,GACb,OAEM,wBAAIC,UAAU,SAASD,EAAME,WCQtBE,MAVf,SAAkBJ,GAChB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,WAAKT,EAAMU,MAAMV,EAAMW,iB,OCgFjEC,G,kNAzEbC,MAAQ,CACNC,MAAOA,EACPC,MAAO,EACPC,SAAU,EACVC,KAAK,EACLC,MAAO,4BACPP,WAAW,G,EAGbQ,QAAU,SAACC,GAET,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,O,EAM7Cb,MAAQ,SAAAiB,GACY,EAAKd,MAAMC,MACAc,QAAO,SAAAC,GAAI,OAAIA,EAAKF,KAAOA,KAErD,EAAKhB,WAEN,EAAKA,WAAY,EAEjB,EAAKmB,SAAS,CAAEf,MAAO,EAAKF,MAAME,MAAQ,IAE1C,EAAKI,QAAQ,EAAKN,MAAMC,OACxBiB,QAAQC,IAAI,kBAEZ,EAAKF,SAAS,CAAEZ,MAAO,kC,uDAOf,IAAD,OAKP,OAJAe,KAAKd,QAAQc,KAAKpB,MAAMC,OACxBiB,QAAQC,IAAIlB,GAIV,kBAAC,EAAD,KACA,kBAAC,EAAD,KAAQmB,KAAKpB,MAAMK,MACnB,0BAAMjB,UAAU,YAAhB,aAAsCgC,KAAKpB,MAAME,OACjD,4BACE,4BACGkB,KAAKpB,MAAME,OAEd,4BACGkB,KAAKpB,MAAME,SAIhB,yBAAKd,UAAU,iBAEdgC,KAAKpB,MAAMC,MAAMoB,KAAI,SAAAL,GAAI,OACxB,kBAAC,EAAD,CACAF,GAAIE,EAAKF,GACTQ,IAAKN,EAAKF,GACVnB,MAAOqB,EAAKrB,MACZG,UAAY,EAAKA,qB,GAjETyB,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.ec584fee.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Title(props) {\n  return (\n\n        <h1 className=\"title\">{props.children}</h1>\n\n  );\n}\n\nexport default Title;","import React from \"react\";\n\n\nfunction GameCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" >\n        <img alt={props.name} src={props.image} onClick={()=>{props.click(props.isClicked)}} />\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;\n\n","import React from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport GameCard from \"./components/GameCards\";\nimport cards from \"./cards.json\";\nimport './App.css';\n\n\n// shuffle(cards); console.log(cards);\n// let clicked = [];\n\nclass App extends React.Component {\n  // setting the properties of base\n  // initialiazing this.state.cards to cards.json array\n  state = {\n    cards: cards,\n    score: 0,\n    topScore: 0,\n    hit: false,\n    title: \"Adventure Time Click Game\",\n    isClicked: false\n  };\n\n  shuffle = (array) => {\n    // fisher-yates shuffle code from j\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  click = id => {\n    const cardArray = this.state.cards;\n    const clickedArr = cardArray.filter(card => card.id === id);\n    // if state of click is false\n    if(this.isClicked) {\n      // set state of click to true\n      this.isClicked = true;\n      // increase score value by one\n      this.setState({ score: this.state.score + 1 });\n      // shuffle cards\n      this.shuffle(this.state.cards);\n      console.log(\"${this.score}\");\n    } else { // if state of click is true\n      this.setState({ title: \"Ooooweee! You guessed wrong!\" });\n      // reset all isClicked to false\n      // log topScore if score is higher than current topScore\n      // .then()=>reset score to zero\n    }\n  };\n    \n    render() {\n      this.shuffle(this.state.cards);\n      console.log(cards);\n      // this.state.cards.map(card);\n      // console.log(card);\n      return (\n        <Wrapper>\n        <Title>{this.state.title}\n        <span className=\"card hit\">Card Hit: {this.state.score}</span>\n        <ul>\n          <li>\n            {this.state.score}\n          </li>\n          <li>\n            {this.state.score}\n          </li>\n        </ul>\n        </Title>\n        <div className=\"cardContainer\">\n\n        {this.state.cards.map(card => (\n          <GameCard \n          id={card.id}\n          key={card.id}\n          image={card.image}\n          isClicked= {this.isClicked}\n          // hit= {this.hit}\n            />\n            \n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}